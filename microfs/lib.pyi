# Copyright (c) 2025 Blackteahamburger <blackteahamburger@outlook.com>
import pathlib
from typing import Final

from serial import Serial

SERIAL_BAUD_RATE: Final[int]

class MicroBitError(OSError): ...
class MicroBitIOError(MicroBitError): ...
class MicroBitNotFoundError(MicroBitError): ...

def find_microbit() -> tuple[str, str | None] | tuple[None, None]: ...
def flush_to_msg(serial: Serial, msg: bytes) -> None: ...
def flush(serial: Serial) -> None: ...
def raw_on(serial: Serial) -> None: ...
def raw_off(serial: Serial) -> None: ...
def get_serial(timeout: int = 10) -> Serial: ...
def clean_error(err: bytes) -> str: ...
def execute(
    commands: list[str], timeout: int = 10, serial: Serial | None = None
) -> bytes: ...
def ls(timeout: int = 10, serial: Serial | None = None) -> list[str]: ...
def cp(
    src: str, dst: str, timeout: int = 10, serial: Serial | None = None
) -> None: ...
def mv(
    src: str, dst: str, timeout: int = 10, serial: Serial | None = None
) -> None: ...
def rm(
    filenames: list[str], timeout: int = 10, serial: Serial | None = None
) -> None: ...
def cat(
    filename: str, timeout: int = 10, serial: Serial | None = None
) -> str: ...
def du(
    filename: str, timeout: int = 10, serial: Serial | None = None
) -> int: ...
def put(
    filename: pathlib.Path,
    target: str | None = None,
    timeout: int = 10,
    serial: Serial | None = None,
) -> None: ...
def get(
    filename: str,
    target: pathlib.Path | None = None,
    timeout: int = 10,
    serial: Serial | None = None,
) -> None: ...
def version(
    timeout: int = 10, serial: Serial | None = None
) -> dict[str, str]: ...
